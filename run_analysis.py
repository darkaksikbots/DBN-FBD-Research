#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DBN-FBD
========================================
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –º–æ–¥–µ–ª–∏

–ê–≤—Ç–æ—Ä—ã: –°.–ú. –ì–∞–≤—Ä–∏–∫–æ–≤, –ù.–ò. –õ—ã—Å–µ–Ω–æ–∫
–ù–ò–£ –í–®–≠, –§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫
"""

import sys
import os
sys.path.append('methodology')

import pandas as pd
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏
try:
    from methodology.bubble_forecast import BubbleForecaster
    from methodology.validation import ModelValidator
except:
    print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥—É–ª–µ–π")


def display_header():
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    print("\n" + "="*80)
    print(" "*20 + "–ú–û–î–ï–õ–¨ DBN-FBD")
    print(" "*10 + "Dynamic Bayesian Network - Financial Bubble Detection")
    print("="*80)
    print("\n–ê–≤—Ç–æ—Ä—ã: –°.–ú. –ì–∞–≤—Ä–∏–∫–æ–≤, –ù.–ò. –õ—ã—Å–µ–Ω–æ–∫")
    print("–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç ¬´–í—ã—Å—à–∞—è —à–∫–æ–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏¬ª")
    print("–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫")
    print("="*80)


def load_and_analyze_data(file_path='financial_data_with_fixed_metrics.csv'):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    print("\nüìä –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•")
    print("-"*40)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = pd.read_csv(file_path, parse_dates=['observation_date'])
        data.set_index('observation_date', inplace=True)
        
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"  –ü–µ—Ä–∏–æ–¥: {data.index[0].strftime('%Y-%m-%d')} ‚Äî {data.index[-1].strftime('%Y-%m-%d')}")
        print(f"  –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {len(data.columns)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if 'composite_bubble_score' in data.columns:
            current_score = data['composite_bubble_score'].iloc[-1]
            print(f"\nüìà –¢–ï–ö–£–©–ò–ô –ò–ù–î–ï–ö–° DBN-FBD: {current_score:.3f}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            if current_score < 0.3:
                risk_level = "LOW (–ù–∏–∑–∫–∏–π)"
                symbol = "‚úÖ"
            elif current_score < 0.5:
                risk_level = "MEDIUM (–°—Ä–µ–¥–Ω–∏–π)"
                symbol = "‚ö†Ô∏è"
            elif current_score < 0.7:
                risk_level = "HIGH (–í—ã—Å–æ–∫–∏–π)"
                symbol = "üî∂"
            else:
                risk_level = "CRITICAL (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π)"
                symbol = "üî¥"
            
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {symbol} {risk_level}")
        
        return data
        
    except FileNotFoundError:
        print(f"‚úó –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏")
        return None
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def analyze_risk_components(data):
    """
    –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
    """
    print("\nüìä –î–ï–ö–û–ú–ü–û–ó–ò–¶–ò–Ø –†–ò–°–ö–ê")
    print("-"*40)
    
    risk_components = {
        'valuation_risk_score': '–í–∞–ª—É–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫',
        'dynamics_risk_score': '–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫',
        'credit_risk_score': '–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–∏—Å–∫',
        'macro_risk_score': '–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫',
        'sentiment_risk_score': '–†–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π'
    }
    
    for col, name in risk_components.items():
        if col in data.columns:
            value = data[col].iloc[-1]
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            bar_length = int(value * 20)
            bar = "‚ñà" * bar_length + "‚ñë" * (20 - bar_length)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if value < 0.3:
                status = "–ù–ò–ó–ö–ò–ô"
            elif value < 0.5:
                status = "–°–†–ï–î–ù–ò–ô"
            elif value < 0.7:
                status = "–í–´–°–û–ö–ò–ô"
            else:
                status = "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô"
            
            print(f"{name:25s}: {value:.3f} {bar} {status}")


def analyze_key_indicators(data):
    """
    –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    """
    print("\nüìä –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´")
    print("-"*40)
    
    indicators = {
        'The_Buffett_Indicator': ('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ë–∞—Ñ—Ñ–µ—Ç—Ç–∞', '%', 145),
        'CAPE_or_Earnings_Ratio_P_E10': ('CAPE Ratio', '', 30),
        'VIX': ('VIX', '', 20),
        'CREDIT_GAP': ('Credit Gap', '%', 10),
        'SPX': ('S&P 500', '', None)
    }
    
    for col, (name, unit, threshold) in indicators.items():
        if col in data.columns:
            value = data[col].iloc[-1]
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
            if pd.notna(value):
                value_str = f"{value:.1f}{unit}"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞
                if threshold:
                    if col == 'VIX':
                        # –î–ª—è VIX –Ω–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã
                        status = " ‚ö†Ô∏è –ù–ò–ó–ö–ê–Ø –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨" if value < threshold else ""
                    else:
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã
                        status = " ‚ö†Ô∏è –ü–†–ï–í–´–®–ï–ù –ü–û–†–û–ì" if value > threshold else ""
                else:
                    status = ""
                
                print(f"{name:25s}: {value_str:>10s}{status}")


def check_anomaly_conditions(data):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∞–Ω–æ–º–∞–ª–∏–∏ —Ä—ã–Ω–∫–∞
    """
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –†–´–ù–û–ß–ù–û–ô –ê–ù–û–ú–ê–õ–ò–ò")
    print("-"*40)
    
    conditions = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ–∫–∏—Ö –≤–∞–ª—É–∞—Ü–∏–π
    if 'The_Buffett_Indicator' in data.columns:
        buffett = data['The_Buffett_Indicator'].iloc[-1]
        if buffett > 180:
            conditions.append(f"‚úì –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∞–ª—É–∞—Ü–∏–∏ (Buffett = {buffett:.1f}%)")
        else:
            conditions.append(f"‚úó –í–∞–ª—É–∞—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ (Buffett = {buffett:.1f}%)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    if 'VIX' in data.columns:
        vix = data['VIX'].iloc[-1]
        if vix < 20:
            conditions.append(f"‚úì –ü–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (VIX = {vix:.1f})")
        else:
            conditions.append(f"‚úó –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (VIX = {vix:.1f})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CAPE
    if 'CAPE_or_Earnings_Ratio_P_E10' in data.columns:
        cape = data['CAPE_or_Earnings_Ratio_P_E10'].iloc[-1]
        if cape > 30:
            conditions.append(f"‚úì –í—ã—Å–æ–∫–∏–π CAPE (CAPE = {cape:.1f})")
        else:
            conditions.append(f"‚úó –ù–æ—Ä–º–∞–ª—å–Ω—ã–π CAPE (CAPE = {cape:.1f})")
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for condition in conditions:
        print(f"  {condition}")
    
    # –î–∏–∞–≥–Ω–æ–∑
    positive_conditions = sum(1 for c in conditions if c.startswith("  ‚úì"))
    
    print("\n" + "="*40)
    if positive_conditions >= 2:
        print("‚ö†Ô∏è –î–ò–ê–ì–ù–û–ó: –û–ë–ù–ê–†–£–ñ–ï–ù–ê –†–´–ù–û–ß–ù–ê–Ø –ê–ù–û–ú–ê–õ–ò–Ø")
        print("   –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –≤—ã—Å–æ–∫–∏—Ö –≤–∞–ª—É–∞—Ü–∏–π –∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        print("   —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏")
    else:
        print("‚úÖ –î–ò–ê–ì–ù–û–ó: –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø –í –ü–†–ï–î–ï–õ–ê–• –ù–û–†–ú–´")
    print("="*40)


def run_forecast(data):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("\nüîÆ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï")
    print("-"*40)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –º–æ–¥–µ–ª–∏
        forecaster = BubbleForecaster(forecast_horizon=6)
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        forecaster.train(data)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤
        print("\n–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤:")
        forecast = forecaster.predict(data, periods=6)
        
        return forecast
        
    except Exception as e:
        print(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞
        if 'composite_bubble_score' in data.columns:
            current = data['composite_bubble_score'].iloc[-1]
            trend = data['composite_bubble_score'].iloc[-30:].mean() - data['composite_bubble_score'].iloc[-60:-30].mean()
            
            print(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current:.3f}")
            print(f"–¢—Ä–µ–Ω–¥: {'üìà –†–∞—Å—Ç—É—â–∏–π' if trend > 0 else 'üìâ –°–Ω–∏–∂–∞—é—â–∏–π—Å—è'}")
            
            for month in range(1, 7):
                projected = current + trend * month
                projected = max(0, min(1, projected))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ [0, 1]
                
                if projected < 0.3:
                    risk = "Low"
                elif projected < 0.5:
                    risk = "Medium"
                elif projected < 0.7:
                    risk = "High"
                else:
                    risk = "Critical"
                
                print(f"  –ú–µ—Å—è—Ü {month}: {projected:.3f} [{risk}]")
        
        return None


def run_validation(data):
    """
    –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
    """
    print("\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–û–î–ï–õ–ò")
    print("-"*40)
    
    try:
        validator = ModelValidator()
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        print("\n–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å:")
        historical_results = validator.validate_historical_bubbles(data)
        
        if len(historical_results) > 0:
            avg_deviation = historical_results['deviation'].mean()
            print(f"  –°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {avg_deviation:.1f}%")
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úì –û—Ç–ª–∏—á–Ω–æ' if avg_deviation < 5 else '‚úì –•–æ—Ä–æ—à–æ' if avg_deviation < 10 else '‚ö† –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}")
        
    except Exception as e:
        print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–∞—Ç–∞—Ö
        known_peaks = {
            '2000-03': ('Dot-com', 0.737),
            '2007-10': ('Housing', 0.700),
            '2021-12': ('COVID', 0.666)
        }
        
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∏–∫–∞—Ö:")
        for date, (name, expected) in known_peaks.items():
            print(f"  {name} ({date}): –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω–¥–µ–∫—Å = {expected:.3f}")


def generate_summary():
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
    """
    print("\n" + "="*80)
    print("–†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê")
    print("="*80)
    
    summary = """
    –ú–æ–¥–µ–ª—å DBN-FBD –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
    —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π, –æ—Å–Ω–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –ø—è—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞:
    
    1. –í–∞–ª—É–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∏—Å–∫ (30%) - –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
    2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (20%) - –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏
    3. –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–∏—Å–∫ (20%) - –æ—Ü–µ–Ω–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    4. –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫ (15%) - –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    5. –†–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π (15%) - –∞–Ω–∞–ª–∏–∑ –∏–Ω–≤–µ—Å—Ç–æ—Ä—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    
    –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞ –≤—Å–µ –∫—Ä—É–ø–Ω—ã–µ –ø—É–∑—ã—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 25 –ª–µ—Ç
    —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –±–æ–ª–µ–µ 90% –∏ —Å—Ä–µ–¥–Ω–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è 6 –º–µ—Å—è—Ü–µ–≤.
    
    –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π –∞–Ω–æ–º–∞–ª–∏–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—é—â–µ–π—Å—è
    —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –≤–∞–ª—É–∞—Ü–∏—è–º–∏ –ø—Ä–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
    """
    
    print(summary)
    
    print("\n" + "="*80)
    print("–î–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("–ì–∞–≤—Ä–∏–∫–æ–≤ –°.–ú., –õ—ã—Å–µ–Ω–æ–∫ –ù.–ò. –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—É–∑—ã—Ä–µ–π")
    print("–≤ —ç–ø–æ—Ö—É –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏: –º–æ–¥–µ–ª—å DBN-FBD // 2025")
    print("="*80)


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    display_header()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = load_and_analyze_data()
    
    if data is not None:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∏—Å–∫–∞
        analyze_risk_components(data)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        analyze_key_indicators(data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π
        check_anomaly_conditions(data)
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        run_forecast(data)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        run_validation(data)
        
        # –†–µ–∑—é–º–µ
        generate_summary()
        
        print("\n‚úì –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        print("\n‚úó –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n" + "="*80)
    print("¬© 2025 –ù–ò–£ –í–®–≠ | –§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫")
    print("="*80 + "\n")


if __name__ == "__main__":
    main()